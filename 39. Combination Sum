class Solution {
    void recCombSum(int index, int target, int[] nums, ArrayList<Integer> ds, List<List<Integer>> result) {

        if (index == nums.length) {
            if (target == 0) {
                result.add(new ArrayList<>(ds));
            }
                return; // getting back from where it was called
        }
        if (nums[index] <= target) {
            ds.add(nums[index]);
            recCombSum(index, target - nums[index], nums, ds, result);
            ds.remove(ds.size() -1); // Remove while backtracking
        }
        recCombSum(index + 1, target, nums, ds, result);
    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        recCombSum(0, target, candidates, new ArrayList<>(), result);
        return result;
    }
}
